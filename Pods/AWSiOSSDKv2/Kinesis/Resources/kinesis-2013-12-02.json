{
  "metadata":{
    "apiVersion":"2013-12-02",
    "endpointPrefix":"kinesis",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"Kinesis",
    "serviceFullName":"Amazon Kinesis",
    "signatureVersion":"v4",
    "targetPrefix":"Kinesis_20131202",
    "protocol":"json"
  },
  "documentation":"<fullname>Amazon Kinesis Service API Reference</fullname> <p>Amazon Kinesis is a managed service that scales elastically for real time processing of streaming big data.</p>",
  "operations":{
    "CreateStream":{
      "name":"CreateStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"CreateStreamInput",
        "documentation":"<p>Represents the input of a <code>CreateStream</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation adds a new Amazon Kinesis stream to your AWS account. A stream captures and transports data records that are continuously emitted from different data sources or <i>producers</i>. Scale-out within an Amazon Kinesis stream is explicitly supported by means of shards, which are uniquely identified groups of data records in an Amazon Kinesis stream.</p> <p>You specify and control the number of shards that a stream is composed of. Each open shard can support up to 5 read transactions per second, up to a maximum total of 2 MB of data read per second. Each shard can support up to 1000 write transactions per second, up to a maximum total of 1 MB data written per second. You can add shards to a stream if the amount of data input increases and you can remove shards if the amount of data input decreases.</p> <p>The stream name identifies the stream. The name is scoped to the AWS account used by the application. It is also scoped by region. That is, two streams in two different accounts can have the same name, and two streams in the same account, but in two different regions, can have the same name. </p> <p><code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code> request, Amazon Kinesis immediately returns and sets the stream status to CREATING. After the stream is created, Amazon Kinesis sets the stream status to ACTIVE. You should perform read and write operations only on an ACTIVE stream. </p> <p>You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code> request if you try to do one of the following:</p> <ul> <li>Have more than five streams in the CREATING state at any point in time.</li> <li>Create more shards than are authorized for your account.</li> </ul> <p><b>Note:</b> The default limit for an AWS account is 10 shards per stream. If you need to create a stream with more than 10 shards, <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS Support</a> to increase the limit on your account.</p> <p>You can use the <code>DescribeStream</code> operation to check the stream status, which is returned in <code>StreamStatus</code>.</p> <p><code>CreateStream</code> has a limit of 5 transactions per second per account.</p>"
    },
    "DeleteStream":{
      "name":"DeleteStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"DeleteStreamInput",
        "documentation":"<p>Represents the input of a <code>DeleteStream</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation deletes a stream and all of its shards and data. You must shut down any applications that are operating on the stream before you delete the stream. If an application attempts to operate on a deleted stream, it will receive the exception <code>ResourceNotFoundException</code>.</p> <p>If the stream is in the ACTIVE state, you can delete it. After a <code>DeleteStream</code> request, the specified stream is in the DELETING state until Amazon Kinesis completes the deletion.</p> <p><b>Note:</b> Amazon Kinesis might continue to accept data read and write operations, such as <a>PutRecord</a> and <a>GetRecords</a>, on a stream in the DELETING state until the stream deletion is complete.</p> <p>When you delete a stream, any shards in that stream are also deleted.</p> <p>You can use the <a>DescribeStream</a> operation to check the state of the stream, which is returned in <code>StreamStatus</code>.</p> <p><code>DeleteStream</code> has a limit of 5 transactions per second per account.</p>"
    },
    "DescribeStream":{
      "name":"DescribeStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"DescribeStreamInput",
        "documentation":"<p>Represents the input of a <code>DescribeStream</code> operation.</p>"
      },
      "output":{
        "shape":"DescribeStreamOutput",
        "documentation":"<p>Represents the output of a <code>DescribeStream</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation returns the following information about the stream: the current status of the stream, the stream Amazon Resource Name (ARN), and an array of shard objects that comprise the stream. For each shard object there is information about the hash key and sequence number ranges that the shard spans, and the IDs of any earlier shards that played in a role in a <a>MergeShards</a> or <a>SplitShard</a> operation that created the shard. A sequence number is the identifier associated with every record ingested in the Amazon Kinesis stream. The sequence number is assigned by the Amazon Kinesis service when a record is put into the stream. </p> <p>You can limit the number of returned shards using the <code>Limit</code> parameter. The number of shards in a stream may be too large to return from a single call to <code>DescribeStream</code>. You can detect this by using the <code>HasMoreShards</code> flag in the returned output. <code>HasMoreShards</code> is set to <code>true</code> when there is more data available. </p> <p>If there are more shards available, you can request more shards by using the shard ID of the last shard returned by the <code>DescribeStream</code> request, in the <code>ExclusiveStartShardId</code> parameter in a subsequent request to <code>DescribeStream</code>. <code>DescribeStream</code> is a paginated operation. </p> <p><code>DescribeStream</code> has a limit of 10 transactions per second per account.</p>"
    },
    "GetRecords":{
      "name":"GetRecords",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"GetRecordsInput",
        "documentation":"<p>Represents the input of a <code>GetRecords</code> operation.</p>"
      },
      "output":{
        "shape":"GetRecordsOutput",
        "documentation":"<p>Represents the output of a <code>GetRecords</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ExpiredIteratorException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation returns one or more data records from a shard. A <code>GetRecords</code> operation request can retrieve up to 10 MB of data.</p> <p>You specify a shard iterator for the shard that you want to read data from in the <code>ShardIterator</code> parameter. The shard iterator specifies the position in the shard from which you want to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in the shard. For more information about the shard iterator, see <a>GetShardIterator</a>.</p> <p><code>GetRecords</code> may return a partial result if the response size limit is exceeded. You will get an error, but not a partial result if the shard's provisioned throughput is exceeded, the shard iterator has expired, or an internal processing failure has occurred. Clients can request a smaller amount of data by specifying a maximum number of returned records using the <code>Limit</code> parameter. The <code>Limit</code> parameter can be set to an integer value of up to 10,000. If you set the value to an integer greater than 10,000, you will receive <code>InvalidArgumentException</code>.</p> <p>A new shard iterator is returned by every <code>GetRecords</code> request in <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code> parameter of the next <code>GetRecords</code> request. When you repeatedly read from an Amazon Kinesis stream use a <a>GetShardIterator</a> request to get the first shard iterator to use in your first <code>GetRecords</code> request and then use the shard iterator returned in <code>NextShardIterator</code> for subsequent reads.</p> <p><code>GetRecords</code> can return <code>null</code> for the <code>NextShardIterator</code> to reflect that the shard has been closed and that the requested shard iterator would never have returned more data. </p> <p>If no items can be processed because of insufficient provisioned throughput on the shard involved in the request, <code>GetRecords</code> throws <code>ProvisionedThroughputExceededException</code>.</p>"
    },
    "GetShardIterator":{
      "name":"GetShardIterator",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"GetShardIteratorInput",
        "documentation":"<p>Represents the input of a <code>GetShardIterator</code> operation.</p>"
      },
      "output":{
        "shape":"GetShardIteratorOutput",
        "documentation":"<p>Represents the output of a <code>GetShardIterator</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation returns a shard iterator in <code>ShardIterator</code>. The shard iterator specifies the position in the shard from which you want to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard. A sequence number is the identifier associated with every record ingested in the Amazon Kinesis stream. The sequence number is assigned by the Amazon Kinesis service when a record is put into the stream. </p> <p>You must specify the shard iterator type in the <code>GetShardIterator</code> request. For example, you can set the <code>ShardIteratorType</code> parameter to read exactly from the position denoted by a specific sequence number by using the AT_SEQUENCE_NUMBER shard iterator type, or right after the sequence number by using the AFTER_SEQUENCE_NUMBER shard iterator type, using sequence numbers returned by earlier <a>PutRecord</a>, <a>GetRecords</a> or <a>DescribeStream</a> requests. You can specify the shard iterator type TRIM_HORIZON in the request to cause <code>ShardIterator</code> to point to the last untrimmed record in the shard in the system, which is the oldest data record in the shard. Or you can point to just after the most recent record in the shard, by using the shard iterator type LATEST, so that you always read the most recent data in the shard. </p> <p><b>Note:</b> Each shard iterator expires five minutes after it is returned to the requester.</p> <p>When you repeatedly read from an Amazon Kinesis stream use a <a>GetShardIterator</a> request to get the first shard iterator to to use in your first <code>GetRecords</code> request and then use the shard iterator returned by the <code>GetRecords</code> request in <code>NextShardIterator</code> for subsequent reads. A new shard iterator is returned by every <code>GetRecords</code> request in <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code> parameter of the next <code>GetRecords</code> request. </p> <p>If a <code>GetShardIterator</code> request is made too often, you will receive a <code>ProvisionedThroughputExceededException</code>. For more information about throughput limits, see the <a href=\"http://docs.aws.amazon.com/kinesis/latest/dev/\">Amazon Kinesis Developer Guide</a>. </p> <p><code>GetShardIterator</code> can return <code>null</code> for its <code>ShardIterator</code> to indicate that the shard has been closed and that the requested iterator will return no more data. A shard can be closed by a <a>SplitShard</a> or <a>MergeShards</a> operation.</p> <p><code>GetShardIterator</code> has a limit of 5 transactions per second per account per open shard.</p>"
    },
    "ListStreams":{
      "name":"ListStreams",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"ListStreamsInput",
        "documentation":"<p>Represents the input of a <code>ListStreams</code> operation.</p>"
      },
      "output":{
        "shape":"ListStreamsOutput",
        "documentation":"<p>Represents the output of a <code>ListStreams</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ],
      "documentation":"<p> This operation returns an array of the names of all the streams that are associated with the AWS account making the <code>ListStreams</code> request. A given AWS account can have many streams active at one time. </p> <p> The number of streams may be too large to return from a single call to <code>ListStreams</code>. You can limit the number of returned streams using the <code>Limit</code> parameter. If you do not specify a value for the <code>Limit</code> parameter, Amazon Kinesis uses the default limit, which is currently 10.</p> <p> You can detect if there are more streams available to list by using the <code>HasMoreStreams</code> flag from the returned output. If there are more streams available, you can request more streams by using the name of the last stream returned by the <code>ListStreams</code> request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request to <code>ListStreams</code>. The group of stream names returned by the subsequent request is then added to the list. You can continue this process until all the stream names have been collected in the list. </p> <p><code>ListStreams</code> has a limit of 5 transactions per second per account.</p>"
    },
    "MergeShards":{
      "name":"MergeShards",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"MergeShardsInput",
        "documentation":"<p>Represents the input of a <code>MergeShards</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation merges two adjacent shards in a stream and combines them into a single shard to reduce the stream's capacity to ingest and transport data. Two shards are considered adjacent if the union of the hash key ranges for the two shards form a contiguous set with no gaps. For example, if you have two shards, one with a hash key range of 276...381 and the other with a hash key range of 382...454, then you could merge these two shards into a single shard that would have a hash key range of 276...454. After the merge, the single child shard receives data for all hash key values covered by the two parent shards.</p> <p><code>MergeShards</code> is called when there is a need to reduce the overall capacity of a stream because of excess capacity that is not being used. The operation requires that you specify the shard to be merged and the adjacent shard for a given stream. For more information about merging shards, see the <a href=\"http://docs.aws.amazon.com/kinesis/latest/dev/\">Amazon Kinesis Developer Guide</a>.</p> <p>If the stream is in the ACTIVE state, you can call <code>MergeShards</code>. If a stream is in CREATING or UPDATING or DELETING states, then Amazon Kinesis returns a <code>ResourceInUseException</code>. If the specified stream does not exist, Amazon Kinesis returns a <code>ResourceNotFoundException</code>. </p> <p>You can use the <a>DescribeStream</a> operation to check the state of the stream, which is returned in <code>StreamStatus</code>.</p> <p><code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code> request, Amazon Kinesis immediately returns a response and sets the <code>StreamStatus</code> to UPDATING. After the operation is completed, Amazon Kinesis sets the <code>StreamStatus</code> to ACTIVE. Read and write operations continue to work while the stream is in the UPDATING state. </p> <p>You use the <a>DescribeStream</a> operation to determine the shard IDs that are specified in the <code>MergeShards</code> request. </p> <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <code>MergeShards</code> or <a>SplitShard</a>, you will receive a <code>LimitExceededException</code>. </p> <p><code>MergeShards</code> has limit of 5 transactions per second per account.</p>"
    },
    "PutRecord":{
      "name":"PutRecord",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"PutRecordInput",
        "documentation":"<p>Represents the input of a <code>PutRecord</code> operation.</p>"
      },
      "output":{
        "shape":"PutRecordOutput",
        "documentation":"<p>Represents the output of a <code>PutRecord</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation puts a data record into an Amazon Kinesis stream from a producer. This operation must be called to send data from the producer into the Amazon Kinesis stream for real-time ingestion and subsequent processing. The <code>PutRecord</code> operation requires the name of the stream that captures, stores, and transports the data; a partition key; and the data blob itself. The data blob could be a segment from a log file, geographic/location data, website clickstream data, or any other data type.</p> <p>The partition key is used to distribute data across shards. Amazon Kinesis segregates the data records that belong to a data stream into multiple shards, using the partition key associated with each data record to determine which shard a given data record belongs to. </p> <p>Partition keys are Unicode strings, with a maximum length limit of 256 bytes. An MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards using the hash key ranges of the shards. You can override hashing the partition key to determine the shard by explicitly specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more information, see the <a href=\"http://docs.aws.amazon.com/kinesis/latest/dev/\">Amazon Kinesis Developer Guide</a>.</p> <p><code>PutRecord</code> returns the shard ID of where the data record was placed and the sequence number that was assigned to the data record.</p> <p>Sequence numbers generally increase over time. To guarantee strictly increasing ordering, use the <code>SequenceNumberForOrdering</code> parameter. For more information, see the <a href=\"http://docs.aws.amazon.com/kinesis/latest/dev/\">Amazon Kinesis Developer Guide</a>.</p> <p>If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>. </p> <p>Data records are accessible for only 24 hours from the time that they are added to an Amazon Kinesis stream.</p>"
    },
    "SplitShard":{
      "name":"SplitShard",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{
        "shape":"SplitShardInput",
        "documentation":"<p>Represents the input of a <code>SplitShard</code> operation.</p>"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ],
      "documentation":"<p>This operation splits a shard into two new shards in the stream, to increase the stream's capacity to ingest and transport data. <code>SplitShard</code> is called when there is a need to increase the overall capacity of stream because of an expected increase in the volume of data records being ingested. </p> <p><code>SplitShard</code> can also be used when a given shard appears to be approaching its maximum utilization, for example, when the set of producers sending data into the specific shard are suddenly sending more than previously anticipated. You can also call the <code>SplitShard</code> operation to increase stream capacity, so that more Amazon Kinesis applications can simultaneously read data from the stream for real-time processing. </p> <p>The <code>SplitShard</code> operation requires that you specify the shard to be split and the new hash key, which is the position in the shard where the shard gets split in two. In many cases, the new hash key might simply be the average of the beginning and ending hash key, but it can be any hash key value in the range being mapped into the shard. For more information about splitting shards, see the <a href=\"http://docs.aws.amazon.com/kinesis/latest/dev/\">Amazon Kinesis Developer Guide</a>. </p> <p>You can use the <a>DescribeStream</a> operation to determine the shard ID and hash key values for the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that are specified in the <code>SplitShard</code> request.</p> <p><code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code> request, Amazon Kinesis immediately returns a response and sets the stream status to UPDATING. After the operation is completed, Amazon Kinesis sets the stream status to ACTIVE. Read and write operations continue to work while the stream is in the UPDATING state. </p> <p>You can use <code>DescribeStream</code> to check the status of the stream, which is returned in <code>StreamStatus</code>. If the stream is in the ACTIVE state, you can call <code>SplitShard</code>. If a stream is in CREATING or UPDATING or DELETING states, then Amazon Kinesis returns a <code>ResourceInUseException</code>.</p> <p>If the specified stream does not exist, Amazon Kinesis returns a <code>ResourceNotFoundException</code>. If you try to create more shards than are authorized for your account, you receive a <code>LimitExceededException</code>. </p> <p><b>Note:</b> The default limit for an AWS account is 10 shards per stream. If you need to create a stream with more than 10 shards, <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS Support</a> to increase the limit on your account.</p> <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <a>MergeShards</a> or <a>SplitShard</a>, you will receive a <code>LimitExceededException</code>. </p> <p><code>SplitShard</code> has limit of 5 transactions per second per account.</p>"
    }
  },
  "shapes":{
    "BooleanObject":{"type":"boolean"},
    "CreateStreamInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardCount"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>A name to identify the stream. The stream name is scoped to the AWS account used by the application that creates the stream. It is also scoped by region. That is, two streams in two different AWS accounts can have the same name, and two streams in the same AWS account, but in two different regions, can have the same name.</p>"
        },
        "ShardCount":{
          "shape":"PositiveIntegerObject",
          "documentation":"<p>The number of shards that the stream will use. The throughput of the stream is a function of the number of shards; more shards are required for greater provisioned throughput.</p> <p><b>Note:</b> The default limit for an AWS account is 10 shards per stream. If you need to create a stream with more than 10 shards, <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS Support</a> to increase the limit on your account.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>CreateStream</code> operation.</p>"
    },
    "Data":{
      "type":"blob",
      "min":0,
      "max":51200
    },
    "DeleteStreamInput":{
      "type":"structure",
      "required":["StreamName"],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream to delete.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>DeleteStream</code> operation.</p>"
    },
    "DescribeStreamInput":{
      "type":"structure",
      "required":["StreamName"],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream to describe.</p>"
        },
        "Limit":{
          "shape":"DescribeStreamInputLimit",
          "documentation":"<p>The maximum number of shards to return.</p>"
        },
        "ExclusiveStartShardId":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the shard to start with for the stream description.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>DescribeStream</code> operation.</p>"
    },
    "DescribeStreamInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "DescribeStreamOutput":{
      "type":"structure",
      "required":["StreamDescription"],
      "members":{
        "StreamDescription":{
          "shape":"StreamDescription",
          "documentation":"<p>Contains the current status of the stream, the stream ARN, an array of shard objects that comprise the stream, and states whether there are more shards available.</p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>DescribeStream</code> operation.</p>"
    },
    "ErrorMessage":{"type":"string"},
    "ExpiredIteratorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "GetRecordsInput":{
      "type":"structure",
      "required":["ShardIterator"],
      "members":{
        "ShardIterator":{
          "shape":"ShardIterator",
          "documentation":"<p>The position in the shard from which you want to start sequentially reading data records.</p>"
        },
        "Limit":{
          "shape":"GetRecordsInputLimit",
          "documentation":"<p>The maximum number of records to return, which can be set to a value of up to 10,000.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>GetRecords</code> operation.</p>"
    },
    "GetRecordsInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "GetRecordsOutput":{
      "type":"structure",
      "required":["Records"],
      "members":{
        "Records":{
          "shape":"RecordList",
          "documentation":"<P>The data records retrieved from the shard.</P>"
        },
        "NextShardIterator":{
          "shape":"ShardIterator",
          "documentation":"<p>The next position in the shard from which to start sequentially reading data records. If set to <code>null</code>, the shard has been closed and the requested iterator will not return any more data. </p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>GetRecords</code> operation.</p>"
    },
    "GetShardIteratorInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardId",
        "ShardIteratorType"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream.</p>"
        },
        "ShardId":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the shard to get the iterator for.</p>"
        },
        "ShardIteratorType":{
          "shape":"ShardIteratorType",
          "documentation":"<p>Determines how the shard iterator is used to start reading data records from the shard.</p> <p>The following are the valid shard iterator types:</p> <ul> <li>AT_SEQUENCE_NUMBER - Start reading exactly from the position denoted by a specific sequence number.</li> <li>AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number.</li> <li>TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.</li> <li>LATEST - Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard.</li> </ul>"
        },
        "StartingSequenceNumber":{
          "shape":"SequenceNumber",
          "documentation":"<p>The sequence number of the data record in the shard from which to start reading from.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>GetShardIterator</code> operation.</p>"
    },
    "GetShardIteratorOutput":{
      "type":"structure",
      "members":{
        "ShardIterator":{
          "shape":"ShardIterator",
          "documentation":"<p>The position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard.</p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>GetShardIterator</code> operation.</p>"
    },
    "HashKey":{
      "type":"string",
      "pattern":"0|([1-9]\\d{0,38})"
    },
    "HashKeyRange":{
      "type":"structure",
      "required":[
        "StartingHashKey",
        "EndingHashKey"
      ],
      "members":{
        "StartingHashKey":{
          "shape":"HashKey",
          "documentation":"<p>The starting hash key of the hash key range.</p>"
        },
        "EndingHashKey":{
          "shape":"HashKey",
          "documentation":"<p>The ending hash key of the hash key range.</p>"
        }
      },
      "documentation":"<p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>"
    },
    "InvalidArgumentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ListStreamsInput":{
      "type":"structure",
      "members":{
        "Limit":{
          "shape":"ListStreamsInputLimit",
          "documentation":"<p>The maximum number of streams to list.</p>"
        },
        "ExclusiveStartStreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream to start the list with.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>ListStreams</code> operation.</p>"
    },
    "ListStreamsInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "ListStreamsOutput":{
      "type":"structure",
      "required":[
        "StreamNames",
        "HasMoreStreams"
      ],
      "members":{
        "StreamNames":{
          "shape":"StreamNameList",
          "documentation":"<p>The names of the streams that are associated with the AWS account making the <code>ListStreams</code> request.</p>"
        },
        "HasMoreStreams":{
          "shape":"BooleanObject",
          "documentation":"<p>If set to <code>true</code>, there are more streams available to list.</p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>ListStreams</code> operation.</p>"
    },
    "MergeShardsInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardToMerge",
        "AdjacentShardToMerge"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream for the merge.</p>"
        },
        "ShardToMerge":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the shard to combine with the adjacent shard for the merge.</p>"
        },
        "AdjacentShardToMerge":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the adjacent shard for the merge.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>MergeShards</code> operation.</p>"
    },
    "PartitionKey":{
      "type":"string",
      "min":1,
      "max":256
    },
    "PositiveIntegerObject":{
      "type":"integer",
      "min":1
    },
    "ProvisionedThroughputExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "PutRecordInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "Data",
        "PartitionKey"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream to put the data record into.</p>"
        },
        "Data":{
          "shape":"Data",
          "documentation":"<p>The data blob to put into the record, which is Base64-encoded when the blob is serialized. The maximum size of the data blob (the payload after Base64-decoding) is 50 kilobytes (KB) </p>"
        },
        "PartitionKey":{
          "shape":"PartitionKey",
          "documentation":"<p>Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 bytes. Amazon Kinesis uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key will map to the same shard within the stream.</p>"
        },
        "ExplicitHashKey":{
          "shape":"HashKey",
          "documentation":"<p>The hash value used to explicitly determine the shard the data record is assigned to by overriding the partition key hash.</p>"
        },
        "SequenceNumberForOrdering":{
          "shape":"SequenceNumber",
          "documentation":"<p>Guarantees strictly increasing sequence numbers, for puts from the same client and to the same partition key. Usage: set the <code>SequenceNumberForOrdering</code> of record <i>n</i> to the sequence number of record <i>n-1</i> (as returned in the <a>PutRecordResult</a> when putting record <i>n-1</i>). If this parameter is not set, records will be coarsely ordered based on arrival time.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>PutRecord</code> operation.</p>"
    },
    "PutRecordOutput":{
      "type":"structure",
      "required":[
        "ShardId",
        "SequenceNumber"
      ],
      "members":{
        "ShardId":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the shard where the data record was placed.</p>"
        },
        "SequenceNumber":{
          "shape":"SequenceNumber",
          "documentation":"<p>The sequence number identifier that was assigned to the put data record. The sequence number for the record is unique across all records in the stream. A sequence number is the identifier associated with every record put into the stream.</p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>PutRecord</code> operation.</p>"
    },
    "Record":{
      "type":"structure",
      "required":[
        "SequenceNumber",
        "Data",
        "PartitionKey"
      ],
      "members":{
        "SequenceNumber":{
          "shape":"SequenceNumber",
          "documentation":"<p>The unique identifier for the record in the Amazon Kinesis stream.</p>"
        },
        "Data":{
          "shape":"Data",
          "documentation":"<p>The data blob. The data in the blob is both opaque and immutable to the Amazon Kinesis service, which does not inspect, interpret, or change the data in the blob in any way. The maximum size of the data blob (the payload after Base64-decoding) is 50 kilobytes (KB) </p>"
        },
        "PartitionKey":{
          "shape":"PartitionKey",
          "documentation":"<p>Identifies which shard in the stream the data record is assigned to.</p>"
        }
      },
      "documentation":"<p>The unit of data of the Amazon Kinesis stream, which is composed of a sequence number, a partition key, and a data blob.</p>"
    },
    "RecordList":{
      "type":"list",
      "member":{"shape":"Record"}
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "SequenceNumber":{
      "type":"string",
      "pattern":"0|([1-9]\\d{0,128})"
    },
    "SequenceNumberRange":{
      "type":"structure",
      "required":["StartingSequenceNumber"],
      "members":{
        "StartingSequenceNumber":{
          "shape":"SequenceNumber",
          "documentation":"<p>The starting sequence number for the range.</p>"
        },
        "EndingSequenceNumber":{
          "shape":"SequenceNumber",
          "documentation":"<p>The ending sequence number for the range. Shards that are in the OPEN state have an ending sequence number of <code>null</code>.</p>"
        }
      },
      "documentation":"<p>The range of possible sequence numbers for the shard.</p>"
    },
    "Shard":{
      "type":"structure",
      "required":[
        "ShardId",
        "HashKeyRange",
        "SequenceNumberRange"
      ],
      "members":{
        "ShardId":{
          "shape":"ShardId",
          "documentation":"<p>The unique identifier of the shard within the Amazon Kinesis stream.</p>"
        },
        "ParentShardId":{
          "shape":"ShardId",
          "documentation":"<p>The shard Id of the shard's parent.</p>"
        },
        "AdjacentParentShardId":{
          "shape":"ShardId",
          "documentation":"<p>The shard Id of the shard adjacent to the shard's parent.</p>"
        },
        "HashKeyRange":{
          "shape":"HashKeyRange",
          "documentation":"<p>The range of possible hash key values for the shard, which is a set of ordered contiguous positive integers.</p>"
        },
        "SequenceNumberRange":{
          "shape":"SequenceNumberRange",
          "documentation":"<p>The range of possible sequence numbers for the shard.</p>"
        }
      },
      "documentation":"<p>A uniquely identified group of data records in an Amazon Kinesis stream.</p>"
    },
    "ShardId":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "ShardIterator":{
      "type":"string",
      "min":1,
      "max":512
    },
    "ShardIteratorType":{
      "type":"string",
      "enum":[
        "AT_SEQUENCE_NUMBER",
        "AFTER_SEQUENCE_NUMBER",
        "TRIM_HORIZON",
        "LATEST"
      ]
    },
    "ShardList":{
      "type":"list",
      "member":{"shape":"Shard"}
    },
    "SplitShardInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardToSplit",
        "NewStartingHashKey"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream for the shard split.</p>"
        },
        "ShardToSplit":{
          "shape":"ShardId",
          "documentation":"<p>The shard ID of the shard to split.</p>"
        },
        "NewStartingHashKey":{
          "shape":"HashKey",
          "documentation":"<p>A hash key value for the starting hash key of one of the child shards created by the split. The hash key range for a given shard constitutes a set of ordered contiguous positive integers. The value for <code>NewStartingHashKey</code> must be in the range of hash keys being mapped into the shard. The <code>NewStartingHashKey</code> hash key value and all higher hash key values in hash key range are distributed to one of the child shards. All the lower hash key values in the range are distributed to the other child shard.</p>"
        }
      },
      "documentation":"<p>Represents the input of a <code>SplitShard</code> operation.</p>"
    },
    "StreamARN":{"type":"string"},
    "StreamDescription":{
      "type":"structure",
      "required":[
        "StreamName",
        "StreamARN",
        "StreamStatus",
        "Shards",
        "HasMoreShards"
      ],
      "members":{
        "StreamName":{
          "shape":"StreamName",
          "documentation":"<p>The name of the stream being described.</p>"
        },
        "StreamARN":{
          "shape":"StreamARN",
          "documentation":"<p>The Amazon Resource Name (ARN) for the stream being described.</p>"
        },
        "StreamStatus":{
          "shape":"StreamStatus",
          "documentation":"<p>The current status of the stream being described.</p> <p>The stream status is one of the following states:</p> <ul> <li>CREATING - The stream is being created. Upon receiving a <a>CreateStream</a> request, Amazon Kinesis immediately returns and sets <code>StreamStatus</code> to CREATING.</li> <li>DELETING - The stream is being deleted. After a <a>DeleteStream</a> request, the specified stream is in the DELETING state until Amazon Kinesis completes the deletion.</li> <li>ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.</li> <li>UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.</li> </ul>"
        },
        "Shards":{
          "shape":"ShardList",
          "documentation":"<p>The shards that comprise the stream.</p>"
        },
        "HasMoreShards":{
          "shape":"BooleanObject",
          "documentation":"<p>If set to <code>true</code> there are more shards in the stream available to describe.</p>"
        }
      },
      "documentation":"<p>Represents the output of a <code>DescribeStream</code> operation.</p>"
    },
    "StreamName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "StreamNameList":{
      "type":"list",
      "member":{"shape":"StreamName"}
    },
    "StreamStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "DELETING",
        "ACTIVE",
        "UPDATING"
      ]
    }
  }
}
